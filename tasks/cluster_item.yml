- block:
  - name: "postgresql-cluster · check cluster {{ cluster.name }}"
    stat:
      path: "{{ _cluster_configuration }}"
    register: cluster_configuration

  - name: "create {{ cluster.name }}"
    block:
      - name: "postgresql-cluster · create directory {{ cluster.name }}"
        file:
          path: "{{ cluster.path }}"
          state: directory
          owner: "{{ postgresql_cluster_postgres_user }}"
          group: "{{ postgresql_cluster_postgres_user }}"
          mode: u=rwx,g=,o=

      - name: "postgresql-cluster · create {{ cluster.name }}"
        command: "sudo -u postgres {{ _postgresql_initdb | distro(vars) }} --locale={{ _cluster_locale | quote }} --lc-messages=en_US.UTF-8 '{{ cluster.path }}'"
        when:
          - ansible_os_family == 'RedHat'
          - not cluster_configuration.stat.exists

      - name: "postgresql-cluster · create {{ cluster.name }}"
        command: >
          pg_createcluster -u {{ postgresql_cluster_postgres_user | quote }}
          --locale={{ _cluster_locale | quote }} --lc-messages=en_US.UTF-8 -d {{ cluster.path | quote }}
          {{ cluster.postgresql_version | quote }} {{ cluster.name | quote }}
        when:
          - ansible_os_family == 'Debian'
          - not cluster_configuration.stat.exists
  
  - name: conf.d directory
    file:
      path: "{{ _cluster_configuration | dirname }}/conf.d"
      owner: "{{ postgresql_cluster_postgres_user }}"
      group: "{{ postgresql_cluster_postgres_user }}"
      state: directory

  - name: conf.d configs
    copy:
      dest: "{{ _cluster_configuration | dirname }}/conf.d/{{ item.name }}"
      owner: "{{ item.owner | default(postgresql_cluster_postgres_user) }}"
      group: "{{ item.group | default(postgresql_cluster_postgres_user) }}"
      mode: "{{ item.mode | default('u=r,go') }}"
      content: "{{ item.content }}"
    loop: "{{ _cluster_postgresql_conf_d }}"

  - name: disable postgresql service (debian)
    service:
      name: postgresql
      state: stopped
      enabled: false
    when: ansible_os_family == 'Debian'

  - block:
    - name: "postgresql-cluster · include_dir"
      lineinfile:
        regexp: "^\\s*include_dir\\s*="
        line: "include_dir = 'conf.d'"
        dest: "{{ _cluster_configuration }}"
    - name: "postgresql-cluster · port configuration {{ cluster.name }}"
      lineinfile:
        regexp: "^\\s*port\\s*="
        line: "port = {{ _cluster_port }}"
        dest: "{{ _cluster_configuration }}"
    - name: "postgresql-cluster · unix socket configuration {{ cluster.name }}"
      lineinfile:
        regexp: "^\\s*{{ _unix_socket_directory | regex_escape }}\\s*="
        line: "{{ _unix_socket_directory }} = '/var/run/postgresql'"
        dest: "{{ _cluster_configuration }}"
    - name: "postgresql-cluster · listen configuration {{ cluster.name }}"
      lineinfile:
        regexp: "^\\s*listen_addresses\\s*="
        line: "listen_addresses = '{{ _cluster_listen_addresses }}'"
        dest: "{{ _cluster_configuration }}"
        insertbefore: "^#\\s*listen_addresses\\s*="
    - name: "postgresql-cluster · pg_hba.conf {{ cluster.name }}"
      copy:
        src: pg_hba.conf
        dest: "{{ _cluster_configuration | dirname }}"
        owner: "{{ postgresql_cluster_postgres_user }}"
        group: "{{ postgresql_cluster_postgres_user }}"
        mode: u+r,g+r,o=
      when: _cluster_pg_hba_override == ''
    - name: "postgresql-cluster · override pg_hba.conf {{ cluster.name }}"
      copy:
        content: "{{ _cluster_pg_hba_override }}"
        dest: "{{ _cluster_configuration | dirname }}/pg_hba.conf"
        owner: "{{ postgresql_cluster_postgres_user }}"
        group: "{{ postgresql_cluster_postgres_user }}"
        mode: u+r,g+r,o=
      when: _cluster_pg_hba_override != ''

  - block:

    # check if a legacy (.include) conf is present
    - name: "postgresql_cluster · check legacy"
      shell: |
        if [ -f "/etc/systemd/system/{{ _cluster_service }}.service" ]; then
          grep ".include" "/etc/systemd/system/{{ _cluster_service }}.service" >/dev/null && echo true || echo false
        else
          echo false
        fi
      register: legacy
      when: not postgresql_systemd_legacy
      check_mode: false
      changed_when: false

    - name: "postgresql_cluster · drop legacy"
      file:
        path: "/etc/systemd/system/{{ _cluster_service }}.service"
        state: absent
      when: not postgresql_systemd_legacy and 'true' in legacy.stdout

    # legacy: we use .include systemd directive to load defaults
    # from package provided .service
    # systemd deprecates and removes .include directive
    - name: "postgresql_cluster · systemctl service's file {{ cluster.name }}"
      template:
        dest: "/etc/systemd/system/{{ _cluster_service }}.service"
        src: postgresql-legacy.service.j2
        owner: root
        group: root
        mode: u=rw,g=r,o=r
      register: service_file
      when: ansible_os_family == 'RedHat' and postgresql_systemd_legacy

    # no legacy: copy file from packaging, change service name and
    # PG_DATA binding
    - name: "postgresql_cluster · systemctl service's file {{ cluster.name }}"
      copy:
        dest: "/etc/systemd/system/{{ _cluster_service }}.service"
        src: "/usr/lib/systemd/system/postgresql-{{ cluster.postgresql_version }}.service"
        remote_src: true
        owner: root
        group: root
        mode: u=rw,g=r,o=r
        # do not replace existing file
        force: false
      register: service_file
      when: ansible_os_family == 'RedHat' and not postgresql_systemd_legacy

    # no legacy: replace PG_DATA configuration
    - name: "postgresql_cluster · systemctl service's file {{ cluster.name }}"
      lineinfile:
        path: "/etc/systemd/system/{{ _cluster_service }}.service"
        owner: root
        group: root
        mode: u=rw,g=r,o=r
        regexp: "Environment=PGDATA=.*"
        line: "Environment=PGDATA={{ cluster.path }}"
      when: ansible_os_family == 'RedHat' and not postgresql_systemd_legacy

    - name: "postgresql_cluster · systemctl service {{ cluster.name }}"
      systemd:
        name: "{{ _cluster_service }}"
        daemon-reload: "{{ service_file.changed }}"
        state: started
        enabled: true

    # workaround enabled-runtime problem
    # https://github.com/ansible/ansible/issues/72451
    - name: "postgresql_cluster · check systemctl service {{ cluster.name }}"
      systemd:
        name: "{{ _cluster_service }}"
        daemon_reload: "{{ service_file.changed }}"
      check_mode: true
      register: postgresql_systemd_wa
    - name: "postgresql_cluster · systemctl service {{ cluster.name }}"
      shell:
        cmd: "systemctl enable {{ _cluster_service }}"
      when: postgresql_systemd_wa.status.UnitFileState == 'enabled-runtime'

    when: _postgresql_systemd

  - block:

    - name: "postgresql_cluster · systemctl service's file {{ cluster.name }}"
      template:
        dest: "/etc/sysconfig/pgsql/{{ _cluster_service }}"
        src: cluster.j2
        owner: root
        group: root
        mode: u=rw,g=r,o=r
      register: service_file

    - name: "postgresql_cluster · initd script"
      file:
        state: link
        src: /etc/init.d/postgresql-{{ cluster.postgresql_version }}
        dest: /etc/init.d/{{ _cluster_service }}

    - name: "postgresql_cluster · enabled service {{ cluster.name }}"
      service:
        name: "{{ _cluster_service }}"
        state: "{{ 'restarted' if service_file.changed else 'started' }}"
        enabled: yes

    when: _postgresql_initd

  become: yes
  become_user: root
  vars:
    _cluster_locale: "{{ cluster.locale | default(postgresql_cluster_default_locale) }}"
    # debian use instance template postgresql@<version>-<cluster>, RedHat a custom file postgresql-<version>-<cluster>
    _cluster_service: "{{ _cluster_service_distro | distro(vars) }}"
    _cluster_service_distro:
      Debian: "postgresql@{{ cluster.postgresql_version }}-{{ cluster.name }}"
      RedHat: "postgresql-{{ cluster.postgresql_version }}-{{ cluster.name }}"
    _cluster_configuration: "{{ _cluster_configuration_distro | distro(vars) }}"
    _cluster_configuration_distro:
      Debian: "/etc/postgresql/{{ cluster.postgresql_version }}/{{ cluster.name }}/postgresql.conf"
      RedHat: "{{ cluster.path }}/postgresql.conf"
    _cluster_port: "{{ cluster.port | default(postgresql_cluster_default_port) }}"
    _unix_socket_directory: "{{ 'unix_socket_directory' if cluster.postgresql_version is version('9.3', '<') else 'unix_socket_directories' }}"
    _cluster_postgresql_conf_d: "{{ cluster.postgresql_conf_d | default([]) }}"
    _cluster_pg_hba_override: "{{ cluster.pg_hba_override | default('') }}"
